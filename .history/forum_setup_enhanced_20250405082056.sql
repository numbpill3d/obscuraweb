-- Enhanced forum setup with user authentication, profiles, categories, and moderation

-- Create extension for UUID generation if not exists
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- Create tables for the forum

-- Users table
CREATE TABLE public.users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    username TEXT UNIQUE NOT NULL,
    email TEXT UNIQUE NOT NULL,
    password_hash TEXT NOT NULL,
    display_name TEXT,
    avatar_url TEXT,
    bio TEXT,
    is_admin BOOLEAN DEFAULT false,
    is_moderator BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Categories table
CREATE TABLE public.categories (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT,
    slug TEXT UNIQUE NOT NULL,
    display_order INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Threads table (enhanced)
CREATE TABLE public.threads (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title TEXT NOT NULL,
    user_id UUID REFERENCES public.users(id),
    category_id BIGINT REFERENCES public.categories(id),
    post_count INTEGER DEFAULT 1,
    is_pinned BOOLEAN DEFAULT false,
    is_locked BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Posts table (enhanced)
CREATE TABLE public.posts (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    thread_id BIGINT NOT NULL REFERENCES public.threads(id) ON DELETE CASCADE,
    user_id UUID REFERENCES public.users(id),
    content TEXT NOT NULL,
    is_edited BOOLEAN DEFAULT false,
    edited_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Moderation actions table
CREATE TABLE public.moderation_actions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    moderator_id UUID NOT NULL REFERENCES public.users(id),
    action_type TEXT NOT NULL, -- 'delete_post', 'lock_thread', 'ban_user', etc.
    target_type TEXT NOT NULL, -- 'post', 'thread', 'user', etc.
    target_id TEXT NOT NULL, -- ID of the target (post ID, thread ID, user ID, etc.)
    reason TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- User sessions table
CREATE TABLE public.user_sessions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    token TEXT NOT NULL,
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- User preferences table
CREATE TABLE public.user_preferences (
    user_id UUID PRIMARY KEY REFERENCES public.users(id) ON DELETE CASCADE,
    email_notifications BOOLEAN DEFAULT true,
    theme TEXT DEFAULT 'default',
    timezone TEXT DEFAULT 'UTC',
    posts_per_page INTEGER DEFAULT 20,
    signature TEXT,
    show_online_status BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Thread subscriptions table
CREATE TABLE public.thread_subscriptions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    thread_id BIGINT NOT NULL REFERENCES public.threads(id) ON DELETE CASCADE,
    notification_type TEXT DEFAULT 'all', -- 'all', 'mentions', 'none'
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    UNIQUE(user_id, thread_id)
);

-- User notifications table
CREATE TABLE public.notifications (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    type TEXT NOT NULL, -- 'thread_reply', 'mention', 'moderation', etc.
    content TEXT NOT NULL,
    link TEXT,
    is_read BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Private messages table
CREATE TABLE public.private_messages (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    sender_id UUID NOT NULL REFERENCES public.users(id),
    recipient_id UUID NOT NULL REFERENCES public.users(id),
    subject TEXT NOT NULL,
    content TEXT NOT NULL,
    is_read BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- User reputation table
CREATE TABLE public.user_reputation (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    reputation_points INTEGER DEFAULT 0,
    level TEXT DEFAULT 'Newbie',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    UNIQUE(user_id)
);

-- Post reactions table
CREATE TABLE public.post_reactions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    post_id BIGINT NOT NULL REFERENCES public.posts(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    reaction_type TEXT NOT NULL, -- 'like', 'love', 'laugh', 'thanks', etc.
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    UNIQUE(post_id, user_id, reaction_type)
);

-- Thread tags table
CREATE TABLE public.tags (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    slug TEXT NOT NULL UNIQUE,
    description TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Thread-tag relationship table
CREATE TABLE public.thread_tags (
    thread_id BIGINT NOT NULL REFERENCES public.threads(id) ON DELETE CASCADE,
    tag_id BIGINT NOT NULL REFERENCES public.tags(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    PRIMARY KEY (thread_id, tag_id)
);

-- User activity log
CREATE TABLE public.user_activity (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    activity_type TEXT NOT NULL, -- 'login', 'post_create', 'thread_create', etc.
    ip_address TEXT,
    user_agent TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Content reports table
CREATE TABLE public.content_reports (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    reporter_id UUID NOT NULL REFERENCES public.users(id),
    content_type TEXT NOT NULL, -- 'post', 'thread', 'user', etc.
    content_id TEXT NOT NULL,
    reason TEXT NOT NULL,
    status TEXT DEFAULT 'pending', -- 'pending', 'resolved', 'rejected'
    moderator_id UUID REFERENCES public.users(id),
    resolution_notes TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    resolved_at TIMESTAMP WITH TIME ZONE
);

-- User bans table
CREATE TABLE public.user_bans (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    moderator_id UUID NOT NULL REFERENCES public.users(id),
    reason TEXT NOT NULL,
    expires_at TIMESTAMP WITH TIME ZONE,
    is_permanent BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create indexes for better performance
-- New indexes only (not in original forum_setup.sql)
CREATE INDEX idx_threads_category_id ON public.threads(category_id);
CREATE INDEX idx_threads_user_id ON public.threads(user_id);
CREATE INDEX idx_posts_user_id ON public.posts(user_id);
CREATE INDEX idx_user_sessions_token ON public.user_sessions(token);
CREATE INDEX idx_user_sessions_expires_at ON public.user_sessions(expires_at);
CREATE INDEX idx_thread_subscriptions_user_id ON public.thread_subscriptions(user_id);
CREATE INDEX idx_thread_subscriptions_thread_id ON public.thread_subscriptions(thread_id);
CREATE INDEX idx_notifications_user_id ON public.notifications(user_id);
CREATE INDEX idx_notifications_is_read ON public.notifications(is_read);
CREATE INDEX idx_private_messages_sender_id ON public.private_messages(sender_id);
CREATE INDEX idx_private_messages_recipient_id ON public.private_messages(recipient_id);
CREATE INDEX idx_private_messages_is_read ON public.private_messages(is_read);
CREATE INDEX idx_post_reactions_post_id ON public.post_reactions(post_id);
CREATE INDEX idx_post_reactions_user_id ON public.post_reactions(user_id);
CREATE INDEX idx_thread_tags_tag_id ON public.thread_tags(tag_id);
CREATE INDEX idx_user_activity_user_id ON public.user_activity(user_id);
CREATE INDEX idx_user_activity_created_at ON public.user_activity(created_at);
CREATE INDEX idx_content_reports_status ON public.content_reports(status);
CREATE INDEX idx_user_bans_user_id ON public.user_bans(user_id);
CREATE INDEX idx_user_bans_expires_at ON public.user_bans(expires_at);

-- Create functions (only new ones, not in original forum_setup.sql)

-- Function to check if user is admin
CREATE OR REPLACE FUNCTION public.is_admin(user_id_param UUID)
RETURNS boolean
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  is_admin_result BOOLEAN;
BEGIN
  SELECT is_admin INTO is_admin_result
  FROM public.users
  WHERE id = user_id_param;
  
  RETURN COALESCE(is_admin_result, false);
END;
$$;

-- Function to check if user is moderator
CREATE OR REPLACE FUNCTION public.is_moderator(user_id_param UUID)
RETURNS boolean
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  is_moderator_result BOOLEAN;
BEGIN
  SELECT (is_moderator OR is_admin) INTO is_moderator_result
  FROM public.users
  WHERE id = user_id_param;
  
  RETURN COALESCE(is_moderator_result, false);
END;
$$;

-- Function to authenticate user
CREATE OR REPLACE FUNCTION public.authenticate_user(email_param TEXT, password_param TEXT)
RETURNS UUID
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  user_id UUID;
BEGIN
  -- In a real implementation, you would hash the password and compare with the stored hash
  -- For this example, we're just comparing the raw password (not secure!)
  SELECT id INTO user_id
  FROM public.users
  WHERE email = email_param AND password_hash = password_param;
  
  RETURN user_id;
END;
$$;

-- Function to create a session
CREATE OR REPLACE FUNCTION public.create_session(user_id_param UUID)
RETURNS TEXT
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  token TEXT;
  session_id UUID;
BEGIN
  -- Generate a random token
  token := encode(gen_random_bytes(32), 'hex');
  
  -- Create a new session
  INSERT INTO public.user_sessions (user_id, token, expires_at)
  VALUES (user_id_param, token, timezone('utc'::text, now()) + interval '7 days')
  RETURNING id INTO session_id;
  
  RETURN token;
END;
$$;

-- Function to check if user is banned
CREATE OR REPLACE FUNCTION public.is_user_banned(user_id_param UUID)
RETURNS boolean
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  is_banned BOOLEAN;
BEGIN
  SELECT EXISTS (
    SELECT 1 FROM public.user_bans
    WHERE user_id = user_id_param
    AND (is_permanent = true OR expires_at > timezone('utc'::text, now()))
  ) INTO is_banned;
  
  RETURN COALESCE(is_banned, false);
END;
$$;

-- Function to add reputation points to a user
CREATE OR REPLACE FUNCTION public.add_reputation_points(user_id_param UUID, points_param INTEGER)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  current_points INTEGER;
  new_level TEXT;
BEGIN
  -- Get current points
  SELECT reputation_points INTO current_points
  FROM public.user_reputation
  WHERE user_id = user_id_param;
  
  -- If user doesn't have a reputation record yet, create one
  IF current_points IS NULL THEN
    INSERT INTO public.user_reputation (user_id, reputation_points)
    VALUES (user_id_param, points_param);
    
    current_points := points_param;
  ELSE
    -- Update points
    UPDATE public.user_reputation
    SET reputation_points = reputation_points + points_param,
        updated_at = timezone('utc'::text, now())
    WHERE user_id = user_id_param;
    
    current_points := current_points + points_param;
  END IF;
  
  -- Determine new level based on points
  IF current_points < 10 THEN
    new_level := 'Newbie';
  ELSIF current_points < 50 THEN
    new_level := 'Member';
  ELSIF current_points < 200 THEN
    new_level := 'Active Member';
  ELSIF current_points < 500 THEN
    new_level := 'Trusted Member';
  ELSIF current_points < 1000 THEN
    new_level := 'Veteran';
  ELSE
    new_level := 'Elite';
  END IF;
  
  -- Update level if needed
  UPDATE public.user_reputation
  SET level = new_level
  WHERE user_id = user_id_param AND level <> new_level;
END;
$$;

-- Function to create a notification for thread subscribers
CREATE OR REPLACE FUNCTION public.notify_thread_subscribers(thread_id_param BIGINT, post_id_param BIGINT, poster_id_param UUID)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  thread_title TEXT;
  poster_name TEXT;
BEGIN
  -- Get thread title and poster name
  SELECT t.title, u.display_name INTO thread_title, poster_name
  FROM public.threads t
  JOIN public.users u ON u.id = poster_id_param
  WHERE t.id = thread_id_param;
  
  -- Create notifications for subscribers
  INSERT INTO public.notifications (user_id, type, content, link)
  SELECT 
    s.user_id, 
    'thread_reply', 
    poster_name || ' replied to thread: ' || thread_title, 
    '/thread/' || thread_id_param || '#post-' || post_id_param
  FROM public.thread_subscriptions s
  WHERE s.thread_id = thread_id_param
  AND s.user_id <> poster_id_param
  AND s.notification_type IN ('all', 'replies');
END;
$$;

-- Function to search threads and posts
CREATE OR REPLACE FUNCTION public.search_forum(search_query TEXT)
RETURNS TABLE (
  result_type TEXT,
  id BIGINT,
  title TEXT,
  content TEXT,
  author TEXT,
  created_at TIMESTAMP WITH TIME ZONE,
  relevance REAL
)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  RETURN QUERY
  -- Search in threads
  SELECT 
    'thread' AS result_type,
    t.id,
    t.title,
    NULL::TEXT AS content,
    u.display_name AS author,
    t.created_at,
    ts_rank(to_tsvector('english', t.title), to_tsquery('english', search_query)) AS relevance
  FROM public.threads t
  JOIN public.users u ON u.id = t.user_id
  WHERE to_tsvector('english', t.title) @@ to_tsquery('english', search_query)
  
  UNION ALL
  
  -- Search in posts
  SELECT 
    'post' AS result_type,
    p.id,
    t.title,
    p.content,
    u.display_name AS author,
    p.created_at,
    ts_rank(to_tsvector('english', p.content), to_tsquery('english', search_query)) AS relevance
  FROM public.posts p
  JOIN public.threads t ON t.id = p.thread_id
  JOIN public.users u ON u.id = p.user_id
  WHERE to_tsvector('english', p.content) @@ to_tsquery('english', search_query)
  
  ORDER BY relevance DESC, created_at DESC
  LIMIT 50;
END;
$$;

-- Function to extract mentions from post content
CREATE OR REPLACE FUNCTION public.extract_mentions(content_param TEXT)
RETURNS TABLE (username TEXT)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  RETURN QUERY
  SELECT DISTINCT substring(mention, 2) AS username
  FROM regexp_matches(content_param, '@([a-zA-Z0-9_]+)', 'g') AS mention;
END;
$$;

-- Function to process mentions in a post
CREATE OR REPLACE FUNCTION public.process_mentions(post_id_param BIGINT)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  post_content TEXT;
  thread_id BIGINT;
  poster_id UUID;
  poster_name TEXT;
  thread_title TEXT;
BEGIN
  -- Get post information
  SELECT p.content, p.thread_id, p.user_id, u.display_name, t.title 
  INTO post_content, thread_id, poster_id, poster_name, thread_title
  FROM public.posts p
  JOIN public.users u ON u.id = p.user_id
  JOIN public.threads t ON t.id = p.thread_id
  WHERE p.id = post_id_param;
  
  -- Create notifications for mentioned users
  INSERT INTO public.notifications (user_id, type, content, link)
  SELECT 
    u.id, 
    'mention', 
    poster_name || ' mentioned you in thread: ' || thread_title, 
    '/thread/' || thread_id || '#post-' || post_id_param
  FROM public.extract_mentions(post_content) m
  JOIN public.users u ON lower(u.username) = lower(m.username)
  WHERE u.id <> poster_id;
END;
$$;

-- Function to log user activity
CREATE OR REPLACE FUNCTION public.log_user_activity(user_id_param UUID, activity_type_param TEXT, ip_address_param TEXT DEFAULT NULL, user_agent_param TEXT DEFAULT NULL)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  INSERT INTO public.user_activity (user_id, activity_type, ip_address, user_agent)
  VALUES (user_id_param, activity_type_param, ip_address_param, user_agent_param);
END;
$$;

-- Set up Row Level Security (RLS)
-- Enable RLS on tables (only new ones, not in original forum_setup.sql)
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.moderation_actions ENABLE ROW LEVEL SECURITY;
