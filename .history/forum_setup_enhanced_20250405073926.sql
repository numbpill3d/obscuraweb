-- Enhanced forum setup with user authentication, profiles, categories, and moderation

-- Create tables for the forum

-- Users table
CREATE TABLE public.users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    username TEXT UNIQUE NOT NULL,
    email TEXT UNIQUE NOT NULL,
    password_hash TEXT NOT NULL,
    display_name TEXT,
    avatar_url TEXT,
    bio TEXT,
    is_admin BOOLEAN DEFAULT false,
    is_moderator BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Categories table
CREATE TABLE public.categories (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT,
    slug TEXT UNIQUE NOT NULL,
    display_order INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Threads table (enhanced)
CREATE TABLE public.threads (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title TEXT NOT NULL,
    user_id UUID REFERENCES public.users(id),
    category_id BIGINT REFERENCES public.categories(id),
    post_count INTEGER DEFAULT 1,
    is_pinned BOOLEAN DEFAULT false,
    is_locked BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Posts table (enhanced)
CREATE TABLE public.posts (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    thread_id BIGINT NOT NULL REFERENCES public.threads(id) ON DELETE CASCADE,
    user_id UUID REFERENCES public.users(id),
    content TEXT NOT NULL,
    is_edited BOOLEAN DEFAULT false,
    edited_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Moderation actions table
CREATE TABLE public.moderation_actions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    moderator_id UUID NOT NULL REFERENCES public.users(id),
    action_type TEXT NOT NULL, -- 'delete_post', 'lock_thread', 'ban_user', etc.
    target_type TEXT NOT NULL, -- 'post', 'thread', 'user', etc.
    target_id TEXT NOT NULL, -- ID of the target (post ID, thread ID, user ID, etc.)
    reason TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- User sessions table
CREATE TABLE public.user_sessions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    token TEXT NOT NULL,
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create indexes for better performance
CREATE INDEX idx_posts_thread_id ON public.posts(thread_id);
CREATE INDEX idx_threads_category_id ON public.threads(category_id);
CREATE INDEX idx_threads_user_id ON public.threads(user_id);
CREATE INDEX idx_posts_user_id ON public.posts(user_id);
CREATE INDEX idx_threads_created_at ON public.threads(created_at DESC);
CREATE INDEX idx_posts_created_at ON public.posts(created_at);
CREATE INDEX idx_user_sessions_token ON public.user_sessions(token);
CREATE INDEX idx_user_sessions_expires_at ON public.user_sessions(expires_at);

-- Create functions

-- Function to increment post count in threads
CREATE OR REPLACE FUNCTION public.increment_post_count(thread_id_param BIGINT)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  UPDATE public.threads
  SET post_count = post_count + 1,
      updated_at = timezone('utc'::text, now())
  WHERE id = thread_id_param;
END;
$$;

-- Function to check if user is admin
CREATE OR REPLACE FUNCTION public.is_admin(user_id_param UUID)
RETURNS boolean
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  is_admin_result BOOLEAN;
BEGIN
  SELECT is_admin INTO is_admin_result
  FROM public.users
  WHERE id = user_id_param;
  
  RETURN COALESCE(is_admin_result, false);
END;
$$;

-- Function to check if user is moderator
CREATE OR REPLACE FUNCTION public.is_moderator(user_id_param UUID)
RETURNS boolean
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  is_moderator_result BOOLEAN;
BEGIN
  SELECT (is_moderator OR is_admin) INTO is_moderator_result
  FROM public.users
  WHERE id = user_id_param;
  
  RETURN COALESCE(is_moderator_result, false);
END;
$$;

-- Function to authenticate user
CREATE OR REPLACE FUNCTION public.authenticate_user(email_param TEXT, password_param TEXT)
RETURNS UUID
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  user_id UUID;
BEGIN
  -- In a real implementation, you would hash the password and compare with the stored hash
  -- For this example, we're just comparing the raw password (not secure!)
  SELECT id INTO user_id
  FROM public.users
  WHERE email = email_param AND password_hash = password_param;
  
  RETURN user_id;
END;
$$;

-- Function to create a session
CREATE OR REPLACE FUNCTION public.create_session(user_id_param UUID)
RETURNS TEXT
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  token TEXT;
  session_id UUID;
BEGIN
  -- Generate a random token
  token := encode(gen_random_bytes(32), 'hex');
  
  -- Create a new session
  INSERT INTO public.user_sessions (user_id, token, expires_at)
  VALUES (user_id_param, token, timezone('utc'::text, now()) + interval '7 days')
  RETURNING id INTO session_id;
  
  RETURN token;
END;
$$;

-- Set up Row Level Security (RLS)
-- Enable RLS on tables
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.threads ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.posts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.moderation_actions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_sessions ENABLE ROW LEVEL SECURITY;

-- Create policies for users table
CREATE POLICY "Allow public read access to users" ON public.users
    FOR SELECT USING (true);

CREATE POLICY "Allow users to update their own profile" ON public.users
    FOR UPDATE USING (auth.uid() = id);

CREATE POLICY "Allow admins to update any user" ON public.users
    FOR UPDATE USING (public.is_admin(auth.uid()));

-- Create policies for threads table
CREATE POLICY "Allow public read access to threads" ON public.threads
    FOR SELECT USING (true);

CREATE POLICY "Allow authenticated users to create threads" ON public.threads
    FOR INSERT WITH CHECK (auth.uid() IS NOT NULL);

CREATE POLICY "Allow thread owners to update their threads" ON public.threads
    FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Allow moderators to update any thread" ON public.threads
    FOR UPDATE USING (public.is_moderator(auth.uid()));

CREATE POLICY "Allow thread owners to delete their threads" ON public.threads
    FOR DELETE USING (auth.uid() = user_id);

CREATE POLICY "Allow moderators to delete any thread" ON public.threads
    FOR DELETE USING (public.is_moderator(auth.uid()));

-- Create policies for posts table
CREATE POLICY "Allow public read access to posts" ON public.posts
    FOR SELECT USING (true);

CREATE POLICY "Allow authenticated users to create posts" ON public.posts
    FOR INSERT WITH CHECK (auth.uid() IS NOT NULL);

CREATE POLICY "Allow post owners to update their posts" ON public.posts
    FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Allow moderators to update any post" ON public.posts
    FOR UPDATE USING (public.is_moderator(auth.uid()));

CREATE POLICY "Allow post owners to delete their posts" ON public.posts
    FOR DELETE USING (auth.uid() = user_id);

CREATE POLICY "Allow moderators to delete any post" ON public.posts
    FOR DELETE USING (public.is_moderator(auth.uid()));

-- Create policies for categories table
CREATE POLICY "Allow public read access to categories" ON public.categories
    FOR SELECT USING (true);

CREATE POLICY "Allow admins to manage categories" ON public.categories
    FOR ALL USING (public.is_admin(auth.uid()));

-- Create policies for moderation_actions table
CREATE POLICY "Allow moderators to create moderation actions" ON public.moderation_actions
    FOR INSERT WITH CHECK (public.is_moderator(auth.uid()));

CREATE POLICY "Allow moderators to view moderation actions" ON public.moderation_actions
    FOR SELECT USING (public.is_moderator(auth.uid()));

-- Create policies for user_sessions table
CREATE POLICY "Allow users to view their own sessions" ON public.user_sessions
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Allow users to delete their own sessions" ON public.user_sessions
    FOR DELETE USING (auth.uid() = user_id);

-- Insert sample data

-- Insert sample categories
INSERT INTO public.categories (name, description, slug, display_order)
VALUES 
    ('General Discussion', 'General topics related to THE UNDERWEB', 'general', 1),
    ('Retro Web Design', 'Discussions about Web 1.0 and retro web design', 'retro-web-design', 2),
    ('Windows 98 Aesthetic', 'All things related to the Windows 98 look and feel', 'windows-98', 3),
    ('Web Rings & Link Directories', 'Discover and share web rings and link directories', 'web-rings', 4),
    ('Help & Support', 'Get help with THE UNDERWEB and related topics', 'help-support', 5);

-- Insert sample users
INSERT INTO public.users (username, email, password_hash, display_name, is_admin, is_moderator)
VALUES 
    ('admin', 'admin@underweb.example.com', 'admin_password_hash', 'Admin', true, true),
    ('moderator', 'mod@underweb.example.com', 'mod_password_hash', 'Moderator', false, true),
    ('webdesigner98', 'webdesigner@example.com', 'user_password_hash', 'WebDesigner98', false, false),
    ('retrofan', 'retrofan@example.com', 'user_password_hash', 'RetroFan', false, false),
    ('vaporwaveenthusiast', 'vaporwave@example.com', 'user_password_hash', 'VaporwaveEnthusiast', false, false);

-- Get user IDs
DO $$
DECLARE
    admin_id UUID;
    mod_id UUID;
    webdesigner_id UUID;
    retrofan_id UUID;
    vaporwave_id UUID;
    
    general_cat_id BIGINT;
    retro_cat_id BIGINT;
    win98_cat_id BIGINT;
    webring_cat_id BIGINT;
    
    thread1_id BIGINT;
    thread2_id BIGINT;
    thread3_id BIGINT;
    thread4_id BIGINT;
BEGIN
    -- Get user IDs
    SELECT id INTO admin_id FROM public.users WHERE username = 'admin';
    SELECT id INTO mod_id FROM public.users WHERE username = 'moderator';
    SELECT id INTO webdesigner_id FROM public.users WHERE username = 'webdesigner98';
    SELECT id INTO retrofan_id FROM public.users WHERE username = 'retrofan';
    SELECT id INTO vaporwave_id FROM public.users WHERE username = 'vaporwaveenthusiast';
    
    -- Get category IDs
    SELECT id INTO general_cat_id FROM public.categories WHERE slug = 'general';
    SELECT id INTO retro_cat_id FROM public.categories WHERE slug = 'retro-web-design';
    SELECT id INTO win98_cat_id FROM public.categories WHERE slug = 'windows-98';
    SELECT id INTO webring_cat_id FROM public.categories WHERE slug = 'web-rings';
    
    -- Insert sample threads
    INSERT INTO public.threads (title, user_id, category_id, post_count)
    VALUES 
        ('Welcome to THE UNDERWEB Forum', admin_id, general_cat_id, 3)
    RETURNING id INTO thread1_id;
    
    INSERT INTO public.threads (title, user_id, category_id, post_count)
    VALUES 
        ('Retro Web Design Tips', webdesigner_id, retro_cat_id, 2)
    RETURNING id INTO thread2_id;
    
    INSERT INTO public.threads (title, user_id, category_id, post_count)
    VALUES 
        ('Share Your Favorite Web 1.0 Sites', retrofan_id, webring_cat_id, 2)
    RETURNING id INTO thread3_id;
    
    INSERT INTO public.threads (title, user_id, category_id, post_count)
    VALUES 
        ('Windows 98 Aesthetic Appreciation', vaporwave_id, win98_cat_id, 2)
    RETURNING id INTO thread4_id;
    
    -- Insert sample posts
    INSERT INTO public.posts (thread_id, user_id, content)
    VALUES
        (thread1_id, admin_id, 'Welcome to THE UNDERWEB forum! This is a place to discuss all things related to the retro web, Web 1.0 aesthetics, and the hidden corners of the internet.\n\nPlease keep discussions civil and on-topic.'),
        (thread1_id, retrofan_id, 'Thanks for creating this forum! I''m excited to connect with other people who appreciate the old-school web aesthetic.'),
        (thread1_id, webdesigner_id, 'This is awesome! I love the Windows 98 theme you''ve got going here.'),
        
        (thread2_id, webdesigner_id, 'Here are some tips for creating authentic Web 1.0 style websites:\n\n1. Use tables for layout\n2. Add plenty of animated GIFs\n3. Don''t forget the visitor counter\n4. Include a guestbook\n5. Use bright, contrasting colors\n\nWhat other tips would you add?'),
        (thread2_id, retrofan_id, 'Don''t forget the "Under Construction" GIFs and the "Best viewed in Netscape Navigator" badges!'),
        
        (thread3_id, retrofan_id, 'What are your favorite Web 1.0 era websites that are still online? I love browsing through these time capsules.\n\nMy favorites are:\n- Space Jam (1996): https://www.spacejam.com/1996/\n- The Dole/Kemp campaign site: https://www.dolekemp96.org/\n\nShare yours!'),
        (thread3_id, vaporwave_id, 'I love the Heaven''s Gate website which is still up and unchanged since 1997: https://www.heavensgate.com/'),
        
        (thread4_id, vaporwave_id, 'There''s something so nostalgic about the Windows 98 UI. The beveled buttons, the iconic start menu, the satisfying click sounds...\n\nWhat are your favorite elements of the Windows 98 aesthetic?'),
        (thread4_id, webdesigner_id, 'I love the error messages with their little icons! And the card games with those green backgrounds. So much character compared to modern flat design.');
    
    -- Insert sample moderation actions
    INSERT INTO public.moderation_actions (moderator_id, action_type, target_type, target_id, reason)
    VALUES
        (admin_id, 'pin_thread', 'thread', thread1_id::text, 'Welcome thread should be pinned'),
        (mod_id, 'edit_post', 'post', '5', 'Fixed formatting issues');
END;
$$;

-- Create extension for UUID generation if not exists
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- Create a trigger to update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();
CREATE TRIGGER update_threads_updated_at BEFORE UPDATE ON threads FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();
CREATE TRIGGER update_posts_updated_at BEFORE UPDATE ON posts FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();
CREATE TRIGGER update_categories_updated_at BEFORE UPDATE ON categories FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();
